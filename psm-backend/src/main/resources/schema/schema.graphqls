type Query{
    #Account
    FrontCover:[String!]
    login(phoneNumber: String, password: String):Account!
    fasterLogin:Account!

    #showcase
    getShowcaseBoxes(showcaseBoxParams: ShowcaseBoxParamsInput):[ShowcaseBox!]
    getShowcaseBoxDetail(ID: String):ShowcaseDetailBox
}

type Mutation{
    #Account
    register(phoneNumber: String, password: String):Account!
    changeUserName(userName: String):Boolean
    changeUserPhoneNumber(userPhoneNumber: String):Boolean
    changeUserPassword(userPassword: String):Boolean
    changeUserProfile(userProfile: Upload!): String
}

scalar Upload

type Account{
    ID: String!
    status: String!
    phoneNumber: String!
    userName: String!
    profile: String!
    token: String!
}

input ShowcaseBoxParamsInput{
    primarySort: String!
    lastSort: String!
    sortWay: String!
    isIdle: Boolean!
    canQuicky: Boolean!
}

type ItemBox{
    ID: String!
    authorID: String!
    price: String!
    type: String!
    imgPath: String!
    videoPath: String!
    abstractInfo: String!
    modifyTime: String!
}

type ShowcaseBox{
    ID: String!
    userName: String!
    profile: String!
    honor: String
    authorBrief: String!
    authorID: String!
    works: String!
    commentNum: String!
    primarySort: String!
    lastSort: String!
    isIdle: String!
    canQuicky: String!
}

type ShowcaseDetailBox{
    ID: String!
    authorID: String!
    price: String!
    imgPath: String!
    videoPath: String!
    abstractInfo: String!
    modifyTime: String!
    mainInfo: String!
    profile: String!
    userName: String!
    commentNum: String!
    primarySort: String!
    lastSort: String!
    isIdle: String!
    canQuicky: String!
}